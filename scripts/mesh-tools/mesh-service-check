#!/bin/bash

# mesh-service-check - Verify status of mesh network services
# Part of ChaseWhiteRabbit Mesh Network Infrastructure

set -e

# Configuration
SCRIPT_NAME=$(basename "$0")
SERVICES=(
    "mesh-network"
    "bandwidth-monitor"
    "node-watchdog"
)
DEPENDENCIES=(
    "systemd-networkd"
    "systemd-resolved"
)

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Print status with color
print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK")
            echo -e "${GREEN}[OK]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} $message"
            ;;
    esac
}

# Check if a service exists
check_service_exists() {
    local service=$1
    if systemctl list-unit-files "$service.service" &>/dev/null; then
        return 0
    else
        print_status "ERROR" "Service $service does not exist"
        return 1
    fi
}

# Check service status
check_service_status() {
    local service=$1
    local verbose=$2
    
    if ! check_service_exists "$service"; then
        return 1
    fi
    
    local active_status=$(systemctl is-active "$service")
    local enabled_status=$(systemctl is-enabled "$service")
    
    if [ "$active_status" = "active" ]; then
        if [ "$enabled_status" = "enabled" ]; then
            print_status "OK" "$service is running and enabled"
            [ "$verbose" = "1" ] && systemctl status "$service" --no-pager
            return 0
        else
            print_status "WARNING" "$service is running but not enabled"
            return 1
        fi
    else
        print_status "ERROR" "$service is not running (status: $active_status)"
        [ "$verbose" = "1" ] && systemctl status "$service" --no-pager
        return 1
    fi
}

# Fix common service issues
fix_service_issues() {
    local service=$1
    
    print_status "WARNING" "Attempting to fix $service..."
    
    systemctl enable "$service" 2>/dev/null || true
    systemctl restart "$service" 2>/dev/null || true
    
    if systemctl is-active "$service" >/dev/null && \
       systemctl is-enabled "$service" >/dev/null; then
        print_status "OK" "Successfully fixed $service"
        return 0
    else
        print_status "ERROR" "Failed to fix $service"
        return 1
    fi
}

# Main execution
main() {
    local total_errors=0
    local total_warnings=0
    local verbose=0
    local fix_issues=0
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                verbose=1
                shift
                ;;
            -f|--fix)
                fix_issues=1
                shift
                ;;
            -h|--help)
                echo "Usage: $SCRIPT_NAME [-v|--verbose] [-f|--fix]"
                exit 0
                ;;
            *)
                echo "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    echo "=== Checking Dependencies ==="
    for dep in "${DEPENDENCIES[@]}"; do
        if ! check_service_status "$dep" "$verbose"; then
            ((total_errors++))
            [ "$fix_issues" = "1" ] && fix_service_issues "$dep"
        fi
    done
    echo
    
    echo "=== Checking Mesh Services ==="
    for service in "${SERVICES[@]}"; do
        if ! check_service_status "$service" "$verbose"; then
            if [ "$(systemctl is-enabled "$service" 2>/dev/null)" != "enabled" ]; then
                ((total_warnings++))
            else
                ((total_errors++))
            fi
            [ "$fix_issues" = "1" ] && fix_service_issues "$service"
        fi
    done
    echo
    
    echo "=== Service Check Summary ==="
    if [ $total_errors -eq 0 ] && [ $total_warnings -eq 0 ]; then
        print_status "OK" "All services are running correctly"
        exit 0
    elif [ $total_errors -eq 0 ]; then
        print_status "WARNING" "$total_warnings service(s) need attention"
        exit 0
    else
        print_status "ERROR" "$total_errors error(s), $total_warnings warning(s)"
        exit 1
    fi
}

main "$@"
