#!/bin/bash

# mesh-node-status - Check status of mesh network node
# Part of ChaseWhiteRabbit Mesh Network Infrastructure

set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Print colored status
print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK")
            echo -e "${GREEN}[OK]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} $message"
            ;;
    esac
}

# Check service status
check_service_status() {
    local service=$1
    if systemctl is-active --quiet "$service"; then
        print_status "OK" "$service is running"
        return 0
    else
        print_status "ERROR" "$service is not running"
        return 1
    fi
}

# Check network connectivity
check_network() {
    local errors=0
    
    # Check network interface
    if ip link show wlan1 &>/dev/null; then
        print_status "OK" "Mesh interface (wlan1) is present"
    else
        print_status "ERROR" "Mesh interface (wlan1) not found"
        ((errors++))
    fi
    
    # Check for IP address
    if ip addr show wlan1 2>/dev/null | grep -q "inet "; then
        print_status "OK" "IP address is configured"
    else
        print_status "ERROR" "No IP address configured"
        ((errors++))
    fi
    
    return $errors
}

# Check resource usage
check_resources() {
    local warnings=0
    
    # Check CPU usage
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d. -f1)
    if [ "$cpu_usage" -gt 80 ]; then
        print_status "WARNING" "High CPU usage: ${cpu_usage}%"
        ((warnings++))
    else
        print_status "OK" "CPU usage: ${cpu_usage}%"
    fi
    
    # Check memory usage
    local mem_usage=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
    if [ "$mem_usage" -gt 80 ]; then
        print_status "WARNING" "High memory usage: ${mem_usage}%"
        ((warnings++))
    else
        print_status "OK" "Memory usage: ${mem_usage}%"
    fi
    
    return $warnings
}

# Main execution
main() {
    echo "=== Mesh Node Status Check ==="
    echo
    
    local total_errors=0
    local total_warnings=0
    
    echo "Checking services..."
    check_service_status "mesh-network" || ((total_errors++))
    check_service_status "bandwidth-monitor" || ((total_errors++))
    check_service_status "node-watchdog" || ((total_errors++))
    echo
    
    echo "Checking network..."
    check_network
    ((total_errors+=$?))
    echo
    
    echo "Checking resources..."
    check_resources
    ((total_warnings+=$?))
    echo
    
    echo "=== Status Summary ==="
    if [ $total_errors -eq 0 ] && [ $total_warnings -eq 0 ]; then
        print_status "OK" "All systems operational"
        exit 0
    elif [ $total_errors -eq 0 ]; then
        print_status "WARNING" "System operational with $total_warnings warning(s)"
        exit 0
    else
        print_status "ERROR" "System issues detected: $total_errors error(s), $total_warnings warning(s)"
        exit 1
    fi
}

main
