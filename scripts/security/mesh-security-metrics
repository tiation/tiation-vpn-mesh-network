#!/bin/bash

# mesh-security-metrics - Collect and analyze mesh network security metrics
# Part of ChaseWhiteRabbit Mesh Network Infrastructure

set -e

SCRIPT_NAME=$(basename "$0")
CONFIG_DIR="/etc/mesh-network"
METRICS_DIR="$CONFIG_DIR/security/metrics"
DATA_DIR="$METRICS_DIR/data"
REPORT_DIR="$METRICS_DIR/reports"

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Print colored status
print_status() {
    local status=$1
    local message=$2
    case $status in
        "OK")
            echo -e "${GREEN}[OK]${NC} $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} $message"
            ;;
    esac
}

# Initialize metrics collection
init_metrics() {
    mkdir -p "$DATA_DIR" "$REPORT_DIR"
    chmod 700 "$METRICS_DIR" "$DATA_DIR" "$REPORT_DIR"
    
    # Create metrics configuration if it doesn't exist
    if [ ! -f "$METRICS_DIR/config.conf" ]; then
        cat > "$METRICS_DIR/config.conf" << EOF
# Security Metrics Configuration

# Collection intervals (seconds)
AUTH_INTERVAL=300
NETWORK_INTERVAL=600
RESOURCE_INTERVAL=60

# Thresholds
AUTH_FAILURES_THRESHOLD=5
BANDWIDTH_THRESHOLD=90
CONNECTIONS_THRESHOLD=100
CPU_THRESHOLD=80
MEMORY_THRESHOLD=80
EOF
        chmod 600 "$METRICS_DIR/config.conf"
    fi
    
    print_status "OK" "Metrics collection system initialized"
}

# Collect authentication metrics
collect_auth_metrics() {
    local timestamp=$(date +%s)
    local auth_log="$DATA_DIR/auth_metrics.log"
    
    # Count authentication failures
    local failed_auths=$(grep "Authentication failed" /var/log/auth.log 2>/dev/null | wc -l || echo "0")
    
    # Count successful logins
    local successful_auths=$(grep "Accepted" /var/log/auth.log 2>/dev/null | wc -l || echo "0")
    
    echo "$timestamp:auth:failed=$failed_auths:success=$successful_auths" >> "$auth_log"
}

# Collect network metrics
collect_network_metrics() {
    local timestamp=$(date +%s)
    local network_log="$DATA_DIR/network_metrics.log"
    
    # Count active connections
    local connections=$(netstat -ant | grep ESTABLISHED | wc -l)
    
    # Get bandwidth usage if available
    local bandwidth_usage=$(ifstat 1 1 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
    
    echo "$timestamp:network:connections=$connections:bandwidth=$bandwidth_usage" >> "$network_log"
}

# Collect resource metrics
collect_resource_metrics() {
    local timestamp=$(date +%s)
    local resource_log="$DATA_DIR/resource_metrics.log"
    
    # Get CPU usage
    local cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d. -f1)
    
    # Get memory usage
    local mem_usage=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
    
    # Get disk usage
    local disk_usage=$(df / | tail -1 | awk '{print $5}' | tr -d '%')
    
    echo "$timestamp:resource:cpu=$cpu_usage:memory=$mem_usage:disk=$disk_usage" >> "$resource_log"
}

# Generate metrics report
generate_report() {
    local report_file="$REPORT_DIR/security_report_$(date +%Y%m%d_%H%M%S).txt"
    
    echo "Security Metrics Report - $(date)" > "$report_file"
    echo "================================" >> "$report_file"
    
    # Authentication metrics
    echo -e "\nAuthentication Metrics (Last 24h):" >> "$report_file"
    tail -n 288 "$DATA_DIR/auth_metrics.log" 2>/dev/null | \
        awk -F: '{sum_failed+=$4; sum_success+=$5} END {
            print "Total Failed Auth: " sum_failed;
            print "Total Successful Auth: " sum_success;
            print "Success Rate: " (sum_success/(sum_failed+sum_success)*100) "%"
        }' >> "$report_file"
    
    # Network metrics
    echo -e "\nNetwork Metrics (Last Hour):" >> "$report_file"
    tail -n 60 "$DATA_DIR/network_metrics.log" 2>/dev/null | \
        awk -F: '{sum_conn+=$4; sum_bw+=$5} END {
            print "Average Connections: " int(sum_conn/NR);
            print "Average Bandwidth Usage: " int(sum_bw/NR) " MB/s"
        }' >> "$report_file"
    
    # Resource metrics
    echo -e "\nResource Metrics (Last Hour):" >> "$report_file"
    tail -n 60 "$DATA_DIR/resource_metrics.log" 2>/dev/null | \
        awk -F: '{sum_cpu+=$4; sum_mem+=$5; sum_disk+=$6} END {
            print "Average CPU Usage: " int(sum_cpu/NR) "%";
            print "Average Memory Usage: " int(sum_mem/NR) "%";
            print "Current Disk Usage: " int(sum_disk) "%"
        }' >> "$report_file"
    
    print_status "OK" "Report generated: $report_file"
}

# Continuous monitoring loop
monitor_loop() {
    while true; do
        collect_auth_metrics
        collect_network_metrics
        collect_resource_metrics
        sleep 60
    done
}

# Main execution
main() {
    case $1 in
        init)
            init_metrics
            ;;
        start)
            if [ ! -d "$METRICS_DIR" ]; then
                init_metrics
            fi
            print_status "OK" "Starting metrics collection"
            monitor_loop
            ;;
        report)
            if [ ! -d "$METRICS_DIR" ]; then
                print_status "ERROR" "Metrics system not initialized"
                exit 1
            fi
            generate_report
            ;;
        status)
            if [ -d "$METRICS_DIR" ]; then
                print_status "OK" "Metrics collection is configured"
                echo "Latest metrics:"
                tail -n 1 "$DATA_DIR"/*.log 2>/dev/null || echo "No metrics collected yet"
            else
                print_status "ERROR" "Metrics system not initialized"
            fi
            ;;
        *)
            echo "Usage: $SCRIPT_NAME <command>"
            echo
            echo "Commands:"
            echo "  init    Initialize metrics collection"
            echo "  start   Start collecting metrics"
            echo "  report  Generate metrics report"
            echo "  status  Show metrics status"
            exit 1
            ;;
    esac
}

main "$@"
